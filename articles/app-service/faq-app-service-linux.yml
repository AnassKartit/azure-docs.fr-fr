### YamlMime:FAQ
metadata:
  title: FAQ pour App Service sur Linux
  description: Trouvez des réponses aux questions fréquentes sur les conteneurs Linux intégrés dans Azure App Service.
  keywords: azure app service, web app, faq, linux, oss, web app for containers, multi-container, multicontainer
  author: msangapu-msft
  ms.topic: article
  ms.service: app-service
  ms.date: 10/30/2018
  ms.author: msangapu
  ms.custom: seodec18
  ms.openlocfilehash: 679381acf9ecd5c8b69bf23bbffabeaeea446404
  ms.sourcegitcommit: 901ea2c2e12c5ed009f642ae8021e27d64d6741e
  ms.translationtype: HT
  ms.contentlocale: fr-FR
  ms.lasthandoff: 11/12/2021
  ms.locfileid: "132372602"
title: FAQ d’Azure App Service sur Linux
summary: >
  Avec la publication d’App Service sur Linux, nous travaillons à l’ajout de fonctionnalités et à l’amélioration de notre plateforme. Cet article fournit des réponses aux questions que nos clients nous ont posées récemment.


  Si vous avez une question, un commentaire sur cet article.
sections:
- name: Images prédéfinies
  questions:
  - question: >
      Je veux répliquer les conteneurs Docker intégrés fournis par la plateforme. Où se trouvent ces fichiers ?
    answer: "Vous trouverez tous les fichiers Docker sur [GitHub](https://github.com/Azure-App-Service/ImageBuilder).\n          \n"
  - question: >
      Quelles sont les valeurs attendues de la section Fichier de démarrage lorsque je configure la pile d’exécution ?
    answer: >
      | Pile           | Valeur attendue                                                                         |

      |-----------------|----------------------------------------------------------------------------------------|

      | Java SE         | la commande pour démarrer votre application JAR (par exemple, `java -jar /home/site/wwwroot/app.jar --server.port=80`) |

      | Tomcat          | l’emplacement d’un script pour effectuer toutes les configurations nécessaires (par exemple, `/home/site/deployments/tools/startup_script.sh`)          |

      | Node.js         | le fichier de configuration PM2 ou votre fichier de script                                |

      | .NET Core       | le nom de la DLL compilée en tant que `dotnet <myapp>.dll`                                 |

      | PHP             | facultatif [démarrage personnalisé](./configure-language-php.md?pivots=platform-linux#customize-start-up) |

      | Python          | facultatif [script de démarrage](./configure-language-python.md#customize-startup-command) |

      | Ruby            | le script Ruby avec lequel initialiser votre application                        |


      Ces commandes ou scripts sont exécutés après le démarrage du conteneur Docker intégré, mais avant le démarrage de votre code d’application.
- name: Gestion
  questions:
  - question: >
      Que se passe-t-il lorsque j’appuie sur le bouton Redémarrer dans le portail Azure ?
    answer: >
      Cette action revient à redémarrer Docker.
  - question: >
      Puis-je utiliser Secure Shell (SSH) pour me connecter à la machine virtuelle du conteneur d’application ?
    answer: >
      Oui, vous pouvez le faire via le site de gestion de contrôle de code source (SCM).


      > [!NOTE]

      > Vous pouvez également vous connecter au conteneur d’application directement à partir de votre ordinateur de développement local à l’aide de SSH, SFTP ou Visual Studio Code (pour le débogage dynamique des applications Node.js). Pour plus d’informations, consultez [Remote debugging and SSH in App Service on Linux (Débogage à distance et technologie SSH dans App Service sur Linux)](https://azure.github.io/AppService/2018/05/07/New-SSH-Experience-and-Remote-Debugging-for-Linux-Web-Apps.html).

      >
  - question: >
      Comment puis-je créer un plan App Service Linux via un kit de développement ou un modèle Azure Resource Manager ?
    answer: >
      Définissez le champ **reserved** du service d’application sur *true*.
- name: Intégration et déploiement continus
  questions:
  - question: >
      Mon application web utilise toujours une ancienne image de conteneur Docker après la mise à jour de l’image sur Docker Hub. Prenez-vous en charge l’intégration et le déploiement continus de conteneurs personnalisés ?
    answer: >
      Oui. Pour configurer l’intégration/le déploiement continu(e) pour Azure Container Registry ou DockerHub, consultez [Déploiement continu avec Web App pour conteneurs](./deploy-ci-cd-custom-container.md). Pour les registres privés, vous pouvez actualiser le conteneur en arrêtant puis démarrant votre application web. Vous pouvez également modifier ou ajouter un paramètre d’application factice pour forcer une actualisation de votre conteneur.
  - question: >
      Prenez-vous en charge les environnements intermédiaires ?
    answer: >
      Oui.
  - question: >
      Puis-je utiliser « WebDeploy/MSDeploy » pour déployer mon application web ?
    answer: >
      Oui, vous devez définir le paramètre d’application `WEBSITE_WEBDEPLOY_USE_SCM` sur *false*.
  - question: >
      Le déploiement Git de mon application échoue quand j’utilise une application web Linux. Comment puis-je résoudre ce problème ?
    answer: >
      Si le déploiement Git sur votre application web Linux échoue, choisissez l’une des options suivantes pour déployer le code de votre application :


      - Utilisez la fonctionnalité Livraison continue (préversion) : Vous pouvez stocker le code source de votre application dans un référentiel Git Azure DevOps ou un référentiel GitHub pour utiliser la livraison continue Azure. Pour plus d’informations, consultez [Configurer la livraison continue pour une application web Linux](https://blogs.msdn.microsoft.com/devops/2017/05/10/use-azure-portal-to-setup-continuous-delivery-for-web-app-on-linux/).


      - Utilisez l’[API de déploiement ZIP](https://github.com/projectkudu/kudu/wiki/Deploying-from-a-zip-file) : pour utiliser cette API, [connectez-vous via SSH à votre application web](configure-linux-open-ssh-session.md) et accédez au dossier où vous souhaitez déployer votre code. Exécutez le code ci-dessous :

         ```bash
         curl -X POST -u <user> --data-binary @<zipfile> https://{your-sitename}.scm.azurewebsites.net/api/zipdeploy
         ```

         Si vous obtenez une erreur stipulant que la commande `curl` est introuvable, veillez à installer curl à l’aide de `apt-get install curl` avant d’exécuter la commande `curl` précédente.
- name: Support multilingue
  questions:
  - question: >
      Je souhaite utiliser des sockets web dans mon application Node.js. Y a-t-il des configurations ou des paramètres spéciaux à définir ?
    answer: >
      Oui, vous devez désactiver `perMessageDeflate` dans votre code Node.js côté serveur. Par exemple, si vous utilisez socket.io, utilisez le code suivant :


      ```nodejs

      const io = require('socket.io')(server,{
        perMessageDeflate :false
      });

      ```
  - question: >
      Prenez-vous en charge les applications .NET Core non compilées ?
    answer: >
      Oui.
  - question: >
      Prenez-vous en charge Composer en tant que gestionnaire de dépendances pour les applications PHP ?
    answer: >
      Oui. Lors d’un déploiement Git, Kudu doit détecter que vous déployez une application PHP (grâce à la présence d’un fichier composer.lock) et déclenchera une installation Composer.
- name: Conteneurs personnalisés
  questions:
  - question: >
      Puis-je utiliser des identités managées avec App Service lors de l’extraction d’images à partir d’ACR ?
    answer: >
      Oui, cette fonctionnalité est disponible dans l’interface Azure CLI. Vous pouvez utiliser des identités [attribuées par le système](https://github.com/Azure/app-service-linux-docs/blob/master/HowTo/use_system-assigned_managed_identities.md) ou [attribuées par l’utilisateur](https://github.com/Azure/app-service-linux-docs/blob/master/HowTo/use_user-assigned_managed_identities.md). Actuellement, cette fonctionnalité n’est pas prise en charge dans le portail Azure.
  - question: >
      J’utilise mon propre conteneur personnalisé. Je souhaite que la plateforme monte un partage SMB dans le répertoire `/home/`.
    answer: >
      Si le paramètre `WEBSITES_ENABLE_APP_SERVICE_STORAGE` est **non spécifié** ou est défini sur *false*, le répertoire `/home/` **n’est pas partagé** par les instances de mise à l’échelle, et les fichiers écrits **ne sont pas conservés** après chaque redémarrage. La définition explicite de `WEBSITES_ENABLE_APP_SERVICE_STORAGE` sur *true* active le montage. Une fois que cette valeur est fixée à true, si vous souhaitez désactiver le montage, vous devez explicitement la fixer `WEBSITES_ENABLE_APP_SERVICE_STORAGE` à *false*.
  - question: >
      Mon conteneur personnalisé met longtemps à démarrer, et la plateforme le redémarre avant qu’il ait terminé.
    answer: >
      Vous pouvez configurer le temps que la plateforme doit attendre avant qu’elle redémarre votre conteneur. Pour ce faire, définissez le paramètre d’application `WEBSITES_CONTAINER_START_TIME_LIMIT` sur la valeur souhaitée. La valeur par défaut est de 230 secondes, la valeur maximale de 1800 secondes.
  - question: >
      Quel est le format de l’URL du serveur de registre privé ?
    answer: >
      Vous devez fournir l’URL de registre complète, y compris `http://` ou `https://`.
  - question: >
      Quel est le format du nom d’image dans l’option de registre privé ?
    answer: >
      Ajoutez le nom complet de l’image, comprenant l’URL de registre privé (par exemple, myacr.azurecr.io/dotnet:latest). Les noms d’image qui utilisent un port personnalisé [ne peuvent pas être entrés par le biais du portail](https://feedback.azure.com/d365community/). Pour définir `docker-custom-image-name`, utilisez [l’outil en ligne de commande `az`](/cli/azure/webapp/config/container#az_webapp_config_container_set).
  - question: >
      Je veux exposer plusieurs ports sur l’image de mon conteneur personnalisé.
    answer: >
      Nous ne prenons pas en charge l’exposition de plusieurs ports.
  - question: >
      Puis-je apporter mon propre système de stockage ?
    answer: >
      Oui, le mode [Bring Your Own Storage](./configure-connect-to-azure-storage.md) est disponible en préversion.
  - question: >
      Pourquoi est-il impossible de parcourir le système de fichiers de mon conteneur personnalisé à partir du site SCM ?
    answer: >
      Le site SCM s’exécute dans un conteneur distinct. Vous ne pouvez pas vérifier le système de fichiers ou les processus en cours d’exécution du conteneur d’application.
  - question: >
      Dois-je implémenter HTTPS dans mon conteneur personnalisé ?
    answer: >
      Non, la plateforme gère l’annulation HTTPS au niveau des serveurs frontaux partagés.
  - question: >
      Dois-je utiliser WEBSITES_PORT pour les conteneurs personnalisés ?
    answer: >
      Oui, c’est obligatoire pour les conteneurs personnalisés. Pour configurer manuellement un port personnalisé, utilisez l’instruction EXPOSE dans le Dockerfile et le paramètre de l’application, WEBSITES_PORT, avec une valeur de port pour la liaison sur le conteneur.
  - question: >
      Puis-je utiliser ASPNETCORE_URLS dans l’image Docker ?
    answer: >
      Oui, remplacez la variable d’environnement avant le démarrage de l’application .NET Core.

      Par exemple, Dans le script init.sh : export ASPNETCORE_URLS={Your value}
- name: Plusieurs conteneurs avec Docker Compose
  questions:
  - question: >
      Comment configurer Azure Container Registry (ACR) de manière à utiliser plusieurs conteneurs ?
    answer: >
      Pour utiliser ACR avec plusieurs conteneurs, **toutes les images de conteneur** doivent être hébergées sur le même serveur de Registre ACR. Une fois qu’elles se trouvent sur le même serveur de Registre, vous devez créer des paramètres d’application, puis mettre à jour le fichier config Docker Compose en y ajoutant le nom de l’image ACR.


      Créez les paramètres d’application suivants :


      - DOCKER_REGISTRY_SERVER_USERNAME

      - DOCKER_REGISTRY_SERVER_URL (URL complète, p. ex. : `https://<server-name>.azurecr.io`)

      - DOCKER_REGISTRY_SERVER_PASSWORD (activez l’accès administrateur dans les paramètres ACR)


      Dans le fichier de configuration, référencez votre image ACR comme dans l’exemple suivant :


      ```yaml

      image: <server-name>.azurecr.io/<image-name>:<tag>

      ```
  - question: >
      Comment savoir quel conteneur est accessible via Internet ?
    answer: >
      - Un seul conteneur peut être ouvert en vue d’y accéder

      - Seuls les ports 80 et 8080 sont accessibles (ports exposés)


      Voici les règles pour déterminer quel conteneur est accessible, par ordre d’importance :


      - Le paramètre d’application `WEBSITES_WEB_CONTAINER_NAME` doit être défini sur le nom du conteneur.

      - Le premier conteneur doit définir le port 80 ou 8080.

      - Si aucune de ces règles n’est appliquée, le premier conteneur défini dans le fichier sera accessible (exposé).
  - question: >
      Comment utiliser depends_on ?
    answer: >
      L' `depends_on` option n’est pas *prise en charge* sur app service et sera ignorée. À l'instar de la [recommandation de Docker concernant le contrôle du démarrage et de l'arrêt](https://docs.docker.com/compose/startup-order/), les applications App Service Multi-container doivent vérifier les dépendances par le biais du code de l'application, tant au démarrage qu'à la déconnexion.


      L'exemple de code ci-dessous montre une application Python vérifiant si un conteneur Redis est en cours d'exécution.


      ```python

      import time


      import redis

      from flask import Flask


      app = Flask(__name__)

      cache = redis.Redis(host='redis', port=6379)


      def get_hit_count():
          retries = 5
          while True:
              try:
                  return cache.incr('hits')
              except redis.exceptions.ConnectionError as exc:
                  if retries == 0:
                      raise exc
                  retries -= 1
                  time.sleep(0.5)

      @app.route('/')

      def hello():
          count = get_hit_count()
          return 'Hello from Azure App Service team! I have been seen {} times.\n'.format(count)

      if __name__ == "__main__":
          app.run(host="0.0.0.0", port=80, debug=True)
      ```

      ## <a name="web-sockets"></a>Web Sockets

      Les Web Sockets sont pris en charge sur les applications Linux.

      > [!IMPORTANT]

      > Les Web Sockets ne sont actuellement pas pris en charge pour les applications Linux sur les plans Free App Service. Nous travaillons à la suppression de cette limitation et nous prévoyons de prendre en charge jusqu’à 5 connexions de Web Socket sur les plans Free App Service.
- name: Tarifs et contrat SLA
  questions:
  - question: >
      À présent que le service est disponible généralement, quels sont les tarifs ?
    answer: >
      La tarification varie en fonction de la référence et de la région, mais vous pouvez voir plus de détails sur notre page de tarification : [Tarification d’App Service](https://azure.microsoft.com/pricing/details/app-service/linux/).
- name: Autres questions
  questions:
  - question: >
      Comment fonctionne la demande de préparation de conteneur ?
    answer: >
      Lorsqu’Azure App Services démarre votre conteneur, la demande de préparation envoie une requête HTTP au point de terminaison [robots933456.txt](configure-custom-container.md?pivots=container-linux#robots933456-in-logs) de votre application. Il s’agit simplement d’un point de terminaison factice, mais votre application doit répondre avec n’importe quel code d’état autre que 5XX. Si votre logique d’application ne répond pas avec un code d’état HTTP à des points de terminaison inexistants, la demande de préparation ne peut pas recevoir de réponse et elle redémarre perpétuellement votre conteneur.


      La demande de préparation peut également échouer en raison d’une configuration incorrecte du port. Pour vous assurer que le port est correctement configuré sur Azure App Services, consultez la question *Comment faire spécifier le port dans mon conteneur Linux ?*
  - question: >
      Est-il possible d’augmenter le délai d’expiration des demandes de préparation de conteneur ?
    answer: La demande de préparation par défaut échoue après une attente de 240 secondes d’une réponse du conteneur. Vous pouvez augmenter le délai d’expiration de la demande de préparation de conteneur en ajoutant le paramètre d’application `WEBSITES_CONTAINER_START_TIME_LIMIT` avec une valeur comprise entre 240 et 1 800 secondes.
  - question: >
      Comment spécifier le port dans mon conteneur Linux ?
    answer: >
      | Type de conteneur | Description | Comment définir/utiliser le port |

      |----------------|-------------|---------------------|

      | Conteneurs intégrés | Si vous sélectionnez une version de langue/framework pour une application Linux, un conteneur prédéfini est sélectionné pour vous. | Pour faire pointer votre code d’application vers le port approprié, utilisez la variable d’environnement PORT. |

      | Conteneurs personnalisés | Vous avez le contrôle total du conteneur. | App Service n'a aucun contrôle sur le port sur lequel votre conteneur écoute. Ce dont il a besoin, c'est de savoir vers quel port transférer les demandes. Si votre conteneur écoute le port 80 ou 8080, App Service est en mesure de le détecter automatiquement. S’il écoute sur un autre port, vous devez définir le paramètre d’application WEBSITES_PORT sur le numéro de port et App Service transférer les demandes vers ce port dans le conteneur. Le paramètre d’application WEBSITES_PORT n’a aucun effet dans le conteneur, et vous ne pouvez pas y accéder en tant que variable d’environnement dans le conteneur. |
  - question: >
      Puis-je utiliser une base de données basée sur un fichier (comme SQLight) avec mon application web Linux ?
    answer: >
      Le système de fichiers de votre application est un partage réseau monté. Cela rend possibles les scénarios de scale-out dans lesquels votre code doit être exécuté sur plusieurs hôtes. Malheureusement, cela bloque l’utilisation de fournisseurs de bases de données basés sur des fichiers comme SQLite, car il n’est pas possible d’acquérir des verrous exclusifs sur le fichier de base de données. Nous recommandons un service de base de données géré : [Azure SQL](https://azure.microsoft.com/products/azure-sql/), [Azure Database pour MySQL](https://azure.microsoft.com/services/mysql/) ou [Azure Database pour PostgreSQL](https://azure.microsoft.com/services/postgresql/)
  - question: >
      Quels sont les caractères pris en charge dans les noms de paramètres d’application ?
    answer: >
      Vous pouvez utiliser uniquement des lettres (A-Z, a-z), des chiffres (0-9) et le trait de soulignement (_) comme paramètres d’application.
  - question: >
      Où puis-je demander de nouvelles fonctionnalités ?
    answer: >
      Vous pouvez proposer votre idée sur le [Forum de commentaires pour Web Apps](https://aka.ms/webapps-uservoice). Ajoutez « [Linux] » au titre de votre idée.
additionalContent: >
  ## <a name="next-steps"></a>Étapes suivantes


  - [Qu’est-ce qu’Azure App Service sur Linux ?](overview.md#app-service-on-linux)

  - [Configurer des environnements intermédiaires dans Azure App Service](deploy-staging-slots.md)

  - [Déploiement continu avec Web App pour conteneurs](./deploy-ci-cd-custom-container.md)

  - [Éléments à connaître : Web Apps et Linux](https://techcommunity.microsoft.com/t5/apps-on-azure/things-you-should-know-web-apps-and-linux/ba-p/392472)

  - [Informations de référence sur les variables d’environnement et les paramètres d’application](reference-app-settings.md)
